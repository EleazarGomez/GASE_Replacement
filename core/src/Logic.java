import java.util.ArrayList;
import java.util.Arrays;

public class Logic
{
	private ArrayList<String> codeElements;
	private String GASEresult;
	private String className;
	private ArrayList<String> classMembers;
	
	public Logic()
	{
		codeElements = new ArrayList<String>();
		GASEresult = "";
		className = "";
		classMembers = new ArrayList<String>();
	}
	
	public String getResult(String data)
	{
		//codeElements = data.split("\\s+");
		codeElements = new ArrayList<String>(Arrays.asList(data.split("\n")));
		cleanElements();
		
		if (checkFormat())
		{
			extractClassInfo();
			GASE();
		}
		
		return GASEresult;
	}
	
	private void cleanElements()
	{
		for (int i = 0; i < codeElements.size(); i++)
		{
			codeElements.set(i, codeElements.get(i).trim());
		}
	
		ArrayList<String> result = new ArrayList<String>();
		
		for (int i = 0; i < codeElements.size(); i++)
		{
			int elementLength = codeElements.get(i).length();
			
			if (elementLength != 0)
			{
				if (!codeElements.get(i).equals("{"))
				{
					result.add(codeElements.get(i));
				}
			}
		}
		
		codeElements = result;
	}
	
	// Syntax checking can be improved (keyword class names, implements, variable declarations)
	private boolean checkFormat()
	{
		boolean first = true;
		
		for (int i = 0; i < codeElements.size(); i++)
		{
			String[] words = codeElements.get(i).split("\\s+"); // Split on whitespace
			
			if (first)
			{
				first = false;
				
				if (words.length < 3)
				{
					GASEresult = "Invalid Syntax or Format.\n\t-- First line must be a valid class declaration.";
					return false;
				}
				else
				{
					if (!words[0].equals("public") && !words[0].equals("private"))
					{
						GASEresult = "Invalid Syntax or Format.\n\t-- First line must be a valid class declaration.";
						return false;
					}
					if (!words[1].equals("class"))
					{
						GASEresult = "Invalid Syntax or Format.\n\t-- First line must be a valid class declaration.";
						return false;
					}
				}
			}
			else
			{
				if (words.length < 3)
				{
					GASEresult = "Invalid Syntax or Format.\n\t-- All lines apart from the first must be valid class member declarations.";
					return false;
				}
				else
				{
					if (!words[0].equals("public") && !words[0].equals("private"))
					{
						GASEresult = "Invalid Syntax or Format.\n\t-- All lines apart from the first must be valid class member declarations.";
						return false;
					}
				}
			}
		}
		
		return true;
	}
	
	private void extractClassInfo()
	{
		boolean first = true;
		
		for (int i = 0; i < codeElements.size(); i++)
		{
			String[] words = codeElements.get(i).split("\\s+"); // Split on whitespace
			
			if (first)
			{
				first = false;
				className = words[2];
			}
			else
			{
				String secondToLast = words[words.length - 2];
				String last = words[words.length - 1];
				String result = secondToLast + " " + last.substring(0, last.length() - 1);
				classMembers.add(result);
			}
		}
	}
	
	private void GASE()
	{
		String workingResult = "";
		
		workingResult += "\t// The following is code automatically generated by GASE\n";
		workingResult += "\n";
		workingResult += "\t// Constructors\n";
		workingResult += "\t/**\n";
		workingResult += "\t * Default constructor\n";
		workingResult += "\t */\n";
		workingResult += "\tpublic " + className + "() {\n";
		workingResult += "\t}\n";
		workingResult += "\n";
		workingResult += "\t/**\n";
		workingResult += "\t * Parameter constructor\n";
		workingResult += "\t */\n";
		workingResult += "\tpublic " + className + "(";
		
		for (int i = 0; i < classMembers.size(); i++)
		{
			
		}
		
		
		
		
		
		workingResult += "\t\n";
		workingResult += "\t\n";
		workingResult += "\t\n";
		
		GASEresult = workingResult;
	}
}
